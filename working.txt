@foreach (var imagePath in Directory.GetFiles(ImagePath, "*.jpg"))
{
    <img src="@imagePath" alt="Picture" onclick="ShowModal('@imagePath')" />
}
private string ImagePath => $"{HostEnvironment.WebRootPath}/Images";


@page "/gallery"
@using System.IO

<h1>Picture Gallery</h1>

<table>
    <tbody>
        @foreach (var filesGroup in GetImageFilesGroupedByRows(8))
        {
            <tr>
                @foreach (var file in filesGroup)
                {
                    <td>
                        <img src="@($"/Pictures/{Path.GetFileName(file)}")" alt="Image" data-toggle="modal" data-target="#myModal" @onclick="(() => ShowImage(file))">
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

<!-- Modal -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <img id="modalImage" src="" alt="Image">
            </div>
        </div>
    </div>
</div>

@code {
    private string selectedImage = "";

    private void ShowImage(string imagePath)
    {
        selectedImage = $"/Pictures/{Path.GetFileName(imagePath)}";
    }

    private IEnumerable<IEnumerable<string>> GetImageFilesGroupedByRows(int numColumns)
    {
        var imageFiles = Directory.GetFiles("wwwroot/Pictures", "*.jpg|*.png|*.gif");
        var numRows = (int)Math.Ceiling((double)imageFiles.Length / numColumns);

        for (int i = 0; i < numRows; i++)
        {
            yield return imageFiles.Skip(i * numColumns).Take(numColumns);
        }
    }
}







@page "/gallery"
@using System.IO

<h1>Picture Gallery</h1>

<table>
    <tbody>
        @foreach (var filesGroup in GetImageFilesGroupedByRows(8))
        {
            <tr>
                @foreach (var file in filesGroup)
                {
                    <td>
                        <img src="@($"/Pictures/{Path.GetFileName(file)}")" alt="Image" data-toggle="modal" data-target="#myModal" @onclick="(() => ShowImage(file))" style="width: 200px; height: 200px;">
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

<!-- Modal -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <img id="modalImage" src="" alt="Image">
            </div>
        </div>
    </div>
</div>

@code {
    private string selectedImage = "";

    private void ShowImage(string imagePath)
    {
        selectedImage = $"/Pictures/{Path.GetFileName(imagePath)}";
    }

    private IEnumerable<IEnumerable<string>> GetImageFilesGroupedByRows(int numColumns)
    {
        var imageFiles = Directory.GetFiles("wwwroot/Pictures", "*.jpg|*.png|*.gif");
        var numRows = (int)Math.Ceiling((double)imageFiles.Length / numColumns);

        for (int i = 0; i < numRows; i++)
        {
            yield return imageFiles.Skip(i * numColumns).Take(numColumns);
        }
    }
}




<link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.0.2/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.0.2/js/bootstrap.bundle.min.js"></script>


Pages/_Host.cshtml


In your Pages/Index.razor file, add a reference to the Bootstrap modal JavaScript file:

@inject IJSRuntime JSRuntime
@* ... *@
@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("import", "/_content/Microsoft.AspNetCore.Components.WebAssembly.Authentication/AuthenticationService.js");
            await JSRuntime.InvokeVoidAsync("import", "/_content/Microsoft.AspNetCore.Components.WebAssembly.Authentication/Authentication.js");
            await JSRuntime.InvokeVoidAsync("import", "/js/bootstrap.min.js");
        }
    }
}
